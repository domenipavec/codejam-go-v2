// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package set

// SetBool type
type SetBool map[bool]struct{}

// NewBool creates new set
func NewBool() SetBool {
	return make(map[bool]struct{})
}

// Add adds elements
func (s SetBool) Add(elements ...bool) {
	for _, element := range elements {
		s[element] = struct{}{}
	}
}

// Remove elements
func (s SetBool) Remove(elements ...bool) {
	for _, element := range elements {
		delete(s, element)
	}
}

// Len get set length
func (s SetBool) Len() int {
	return len(s)
}

// Contains check if c in set
func (s SetBool) Contains(element bool) bool {
	_, ok := s[element]
	return ok
}

// SetByte type
type SetByte map[byte]struct{}

// NewByte creates new set
func NewByte() SetByte {
	return make(map[byte]struct{})
}

// Add adds elements
func (s SetByte) Add(elements ...byte) {
	for _, element := range elements {
		s[element] = struct{}{}
	}
}

// Remove elements
func (s SetByte) Remove(elements ...byte) {
	for _, element := range elements {
		delete(s, element)
	}
}

// Len get set length
func (s SetByte) Len() int {
	return len(s)
}

// Contains check if c in set
func (s SetByte) Contains(element byte) bool {
	_, ok := s[element]
	return ok
}

// SetComplex128 type
type SetComplex128 map[complex128]struct{}

// NewComplex128 creates new set
func NewComplex128() SetComplex128 {
	return make(map[complex128]struct{})
}

// Add adds elements
func (s SetComplex128) Add(elements ...complex128) {
	for _, element := range elements {
		s[element] = struct{}{}
	}
}

// Remove elements
func (s SetComplex128) Remove(elements ...complex128) {
	for _, element := range elements {
		delete(s, element)
	}
}

// Len get set length
func (s SetComplex128) Len() int {
	return len(s)
}

// Contains check if c in set
func (s SetComplex128) Contains(element complex128) bool {
	_, ok := s[element]
	return ok
}

// SetComplex64 type
type SetComplex64 map[complex64]struct{}

// NewComplex64 creates new set
func NewComplex64() SetComplex64 {
	return make(map[complex64]struct{})
}

// Add adds elements
func (s SetComplex64) Add(elements ...complex64) {
	for _, element := range elements {
		s[element] = struct{}{}
	}
}

// Remove elements
func (s SetComplex64) Remove(elements ...complex64) {
	for _, element := range elements {
		delete(s, element)
	}
}

// Len get set length
func (s SetComplex64) Len() int {
	return len(s)
}

// Contains check if c in set
func (s SetComplex64) Contains(element complex64) bool {
	_, ok := s[element]
	return ok
}

// SetError type
type SetError map[error]struct{}

// NewError creates new set
func NewError() SetError {
	return make(map[error]struct{})
}

// Add adds elements
func (s SetError) Add(elements ...error) {
	for _, element := range elements {
		s[element] = struct{}{}
	}
}

// Remove elements
func (s SetError) Remove(elements ...error) {
	for _, element := range elements {
		delete(s, element)
	}
}

// Len get set length
func (s SetError) Len() int {
	return len(s)
}

// Contains check if c in set
func (s SetError) Contains(element error) bool {
	_, ok := s[element]
	return ok
}

// SetFloat32 type
type SetFloat32 map[float32]struct{}

// NewFloat32 creates new set
func NewFloat32() SetFloat32 {
	return make(map[float32]struct{})
}

// Add adds elements
func (s SetFloat32) Add(elements ...float32) {
	for _, element := range elements {
		s[element] = struct{}{}
	}
}

// Remove elements
func (s SetFloat32) Remove(elements ...float32) {
	for _, element := range elements {
		delete(s, element)
	}
}

// Len get set length
func (s SetFloat32) Len() int {
	return len(s)
}

// Contains check if c in set
func (s SetFloat32) Contains(element float32) bool {
	_, ok := s[element]
	return ok
}

// SetFloat64 type
type SetFloat64 map[float64]struct{}

// NewFloat64 creates new set
func NewFloat64() SetFloat64 {
	return make(map[float64]struct{})
}

// Add adds elements
func (s SetFloat64) Add(elements ...float64) {
	for _, element := range elements {
		s[element] = struct{}{}
	}
}

// Remove elements
func (s SetFloat64) Remove(elements ...float64) {
	for _, element := range elements {
		delete(s, element)
	}
}

// Len get set length
func (s SetFloat64) Len() int {
	return len(s)
}

// Contains check if c in set
func (s SetFloat64) Contains(element float64) bool {
	_, ok := s[element]
	return ok
}

// SetInt type
type SetInt map[int]struct{}

// NewInt creates new set
func NewInt() SetInt {
	return make(map[int]struct{})
}

// Add adds elements
func (s SetInt) Add(elements ...int) {
	for _, element := range elements {
		s[element] = struct{}{}
	}
}

// Remove elements
func (s SetInt) Remove(elements ...int) {
	for _, element := range elements {
		delete(s, element)
	}
}

// Len get set length
func (s SetInt) Len() int {
	return len(s)
}

// Contains check if c in set
func (s SetInt) Contains(element int) bool {
	_, ok := s[element]
	return ok
}

// SetInt16 type
type SetInt16 map[int16]struct{}

// NewInt16 creates new set
func NewInt16() SetInt16 {
	return make(map[int16]struct{})
}

// Add adds elements
func (s SetInt16) Add(elements ...int16) {
	for _, element := range elements {
		s[element] = struct{}{}
	}
}

// Remove elements
func (s SetInt16) Remove(elements ...int16) {
	for _, element := range elements {
		delete(s, element)
	}
}

// Len get set length
func (s SetInt16) Len() int {
	return len(s)
}

// Contains check if c in set
func (s SetInt16) Contains(element int16) bool {
	_, ok := s[element]
	return ok
}

// SetInt32 type
type SetInt32 map[int32]struct{}

// NewInt32 creates new set
func NewInt32() SetInt32 {
	return make(map[int32]struct{})
}

// Add adds elements
func (s SetInt32) Add(elements ...int32) {
	for _, element := range elements {
		s[element] = struct{}{}
	}
}

// Remove elements
func (s SetInt32) Remove(elements ...int32) {
	for _, element := range elements {
		delete(s, element)
	}
}

// Len get set length
func (s SetInt32) Len() int {
	return len(s)
}

// Contains check if c in set
func (s SetInt32) Contains(element int32) bool {
	_, ok := s[element]
	return ok
}

// SetInt64 type
type SetInt64 map[int64]struct{}

// NewInt64 creates new set
func NewInt64() SetInt64 {
	return make(map[int64]struct{})
}

// Add adds elements
func (s SetInt64) Add(elements ...int64) {
	for _, element := range elements {
		s[element] = struct{}{}
	}
}

// Remove elements
func (s SetInt64) Remove(elements ...int64) {
	for _, element := range elements {
		delete(s, element)
	}
}

// Len get set length
func (s SetInt64) Len() int {
	return len(s)
}

// Contains check if c in set
func (s SetInt64) Contains(element int64) bool {
	_, ok := s[element]
	return ok
}

// SetInt8 type
type SetInt8 map[int8]struct{}

// NewInt8 creates new set
func NewInt8() SetInt8 {
	return make(map[int8]struct{})
}

// Add adds elements
func (s SetInt8) Add(elements ...int8) {
	for _, element := range elements {
		s[element] = struct{}{}
	}
}

// Remove elements
func (s SetInt8) Remove(elements ...int8) {
	for _, element := range elements {
		delete(s, element)
	}
}

// Len get set length
func (s SetInt8) Len() int {
	return len(s)
}

// Contains check if c in set
func (s SetInt8) Contains(element int8) bool {
	_, ok := s[element]
	return ok
}

// SetRune type
type SetRune map[rune]struct{}

// NewRune creates new set
func NewRune() SetRune {
	return make(map[rune]struct{})
}

// Add adds elements
func (s SetRune) Add(elements ...rune) {
	for _, element := range elements {
		s[element] = struct{}{}
	}
}

// Remove elements
func (s SetRune) Remove(elements ...rune) {
	for _, element := range elements {
		delete(s, element)
	}
}

// Len get set length
func (s SetRune) Len() int {
	return len(s)
}

// Contains check if c in set
func (s SetRune) Contains(element rune) bool {
	_, ok := s[element]
	return ok
}

// SetString type
type SetString map[string]struct{}

// NewString creates new set
func NewString() SetString {
	return make(map[string]struct{})
}

// Add adds elements
func (s SetString) Add(elements ...string) {
	for _, element := range elements {
		s[element] = struct{}{}
	}
}

// Remove elements
func (s SetString) Remove(elements ...string) {
	for _, element := range elements {
		delete(s, element)
	}
}

// Len get set length
func (s SetString) Len() int {
	return len(s)
}

// Contains check if c in set
func (s SetString) Contains(element string) bool {
	_, ok := s[element]
	return ok
}

// SetUint type
type SetUint map[uint]struct{}

// NewUint creates new set
func NewUint() SetUint {
	return make(map[uint]struct{})
}

// Add adds elements
func (s SetUint) Add(elements ...uint) {
	for _, element := range elements {
		s[element] = struct{}{}
	}
}

// Remove elements
func (s SetUint) Remove(elements ...uint) {
	for _, element := range elements {
		delete(s, element)
	}
}

// Len get set length
func (s SetUint) Len() int {
	return len(s)
}

// Contains check if c in set
func (s SetUint) Contains(element uint) bool {
	_, ok := s[element]
	return ok
}

// SetUint16 type
type SetUint16 map[uint16]struct{}

// NewUint16 creates new set
func NewUint16() SetUint16 {
	return make(map[uint16]struct{})
}

// Add adds elements
func (s SetUint16) Add(elements ...uint16) {
	for _, element := range elements {
		s[element] = struct{}{}
	}
}

// Remove elements
func (s SetUint16) Remove(elements ...uint16) {
	for _, element := range elements {
		delete(s, element)
	}
}

// Len get set length
func (s SetUint16) Len() int {
	return len(s)
}

// Contains check if c in set
func (s SetUint16) Contains(element uint16) bool {
	_, ok := s[element]
	return ok
}

// SetUint32 type
type SetUint32 map[uint32]struct{}

// NewUint32 creates new set
func NewUint32() SetUint32 {
	return make(map[uint32]struct{})
}

// Add adds elements
func (s SetUint32) Add(elements ...uint32) {
	for _, element := range elements {
		s[element] = struct{}{}
	}
}

// Remove elements
func (s SetUint32) Remove(elements ...uint32) {
	for _, element := range elements {
		delete(s, element)
	}
}

// Len get set length
func (s SetUint32) Len() int {
	return len(s)
}

// Contains check if c in set
func (s SetUint32) Contains(element uint32) bool {
	_, ok := s[element]
	return ok
}

// SetUint64 type
type SetUint64 map[uint64]struct{}

// NewUint64 creates new set
func NewUint64() SetUint64 {
	return make(map[uint64]struct{})
}

// Add adds elements
func (s SetUint64) Add(elements ...uint64) {
	for _, element := range elements {
		s[element] = struct{}{}
	}
}

// Remove elements
func (s SetUint64) Remove(elements ...uint64) {
	for _, element := range elements {
		delete(s, element)
	}
}

// Len get set length
func (s SetUint64) Len() int {
	return len(s)
}

// Contains check if c in set
func (s SetUint64) Contains(element uint64) bool {
	_, ok := s[element]
	return ok
}

// SetUint8 type
type SetUint8 map[uint8]struct{}

// NewUint8 creates new set
func NewUint8() SetUint8 {
	return make(map[uint8]struct{})
}

// Add adds elements
func (s SetUint8) Add(elements ...uint8) {
	for _, element := range elements {
		s[element] = struct{}{}
	}
}

// Remove elements
func (s SetUint8) Remove(elements ...uint8) {
	for _, element := range elements {
		delete(s, element)
	}
}

// Len get set length
func (s SetUint8) Len() int {
	return len(s)
}

// Contains check if c in set
func (s SetUint8) Contains(element uint8) bool {
	_, ok := s[element]
	return ok
}

// SetUintptr type
type SetUintptr map[uintptr]struct{}

// NewUintptr creates new set
func NewUintptr() SetUintptr {
	return make(map[uintptr]struct{})
}

// Add adds elements
func (s SetUintptr) Add(elements ...uintptr) {
	for _, element := range elements {
		s[element] = struct{}{}
	}
}

// Remove elements
func (s SetUintptr) Remove(elements ...uintptr) {
	for _, element := range elements {
		delete(s, element)
	}
}

// Len get set length
func (s SetUintptr) Len() int {
	return len(s)
}

// Contains check if c in set
func (s SetUintptr) Contains(element uintptr) bool {
	_, ok := s[element]
	return ok
}
