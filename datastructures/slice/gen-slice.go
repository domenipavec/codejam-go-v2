// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package slice

import (
	"fmt"
	"sort"
)

// SliceByte type
type SliceByte []byte

// NewByte creates slice length n
func NewByte(n int) SliceByte {
	return make([]byte, n)
}

// Copy makes a new independent copy of slice
func (slice SliceByte) Copy() SliceByte {
	newSlice := NewByte(len(slice))
	copy(newSlice, slice)
	return newSlice
}

// Set sets all element to c
func (slice SliceByte) Set(c byte) {
	for i := 0; i < len(slice); i++ {
		slice[i] = c
	}
}

// SortAsc sort ascending
func (slice SliceByte) SortAsc() {
	sort.Sort(slice)
}

// SortDesc sort descending
func (slice SliceByte) SortDesc() {
	sort.Sort(sort.Reverse(slice))
}

func (slice SliceByte) Len() int {
	return len(slice)
}

func (slice SliceByte) Less(i, j int) bool {
	return slice[i] < slice[j]
}

func (slice SliceByte) Swap(i, j int) {
	slice[i], slice[j] = slice[j], slice[i]
}

// Append c to slice
func (slice *SliceByte) Append(c byte) {
	*slice = append(*slice, c)
}

func (slice SliceByte) String() string {
	output := ""
	for _, c := range slice {
		if output != "" {
			output += " "
		}
		output += fmt.Sprintf("%v", c)
	}
	return output
}

// SliceInt8 type
type SliceInt8 []int8

// NewInt8 creates slice length n
func NewInt8(n int) SliceInt8 {
	return make([]int8, n)
}

// Copy makes a new independent copy of slice
func (slice SliceInt8) Copy() SliceInt8 {
	newSlice := NewInt8(len(slice))
	copy(newSlice, slice)
	return newSlice
}

// Set sets all element to c
func (slice SliceInt8) Set(c int8) {
	for i := 0; i < len(slice); i++ {
		slice[i] = c
	}
}

// SortAsc sort ascending
func (slice SliceInt8) SortAsc() {
	sort.Sort(slice)
}

// SortDesc sort descending
func (slice SliceInt8) SortDesc() {
	sort.Sort(sort.Reverse(slice))
}

func (slice SliceInt8) Len() int {
	return len(slice)
}

func (slice SliceInt8) Less(i, j int) bool {
	return slice[i] < slice[j]
}

func (slice SliceInt8) Swap(i, j int) {
	slice[i], slice[j] = slice[j], slice[i]
}

// Append c to slice
func (slice *SliceInt8) Append(c int8) {
	*slice = append(*slice, c)
}

func (slice SliceInt8) String() string {
	output := ""
	for _, c := range slice {
		if output != "" {
			output += " "
		}
		output += fmt.Sprintf("%v", c)
	}
	return output
}

// SliceInt16 type
type SliceInt16 []int16

// NewInt16 creates slice length n
func NewInt16(n int) SliceInt16 {
	return make([]int16, n)
}

// Copy makes a new independent copy of slice
func (slice SliceInt16) Copy() SliceInt16 {
	newSlice := NewInt16(len(slice))
	copy(newSlice, slice)
	return newSlice
}

// Set sets all element to c
func (slice SliceInt16) Set(c int16) {
	for i := 0; i < len(slice); i++ {
		slice[i] = c
	}
}

// SortAsc sort ascending
func (slice SliceInt16) SortAsc() {
	sort.Sort(slice)
}

// SortDesc sort descending
func (slice SliceInt16) SortDesc() {
	sort.Sort(sort.Reverse(slice))
}

func (slice SliceInt16) Len() int {
	return len(slice)
}

func (slice SliceInt16) Less(i, j int) bool {
	return slice[i] < slice[j]
}

func (slice SliceInt16) Swap(i, j int) {
	slice[i], slice[j] = slice[j], slice[i]
}

// Append c to slice
func (slice *SliceInt16) Append(c int16) {
	*slice = append(*slice, c)
}

func (slice SliceInt16) String() string {
	output := ""
	for _, c := range slice {
		if output != "" {
			output += " "
		}
		output += fmt.Sprintf("%v", c)
	}
	return output
}

// SliceInt32 type
type SliceInt32 []int32

// NewInt32 creates slice length n
func NewInt32(n int) SliceInt32 {
	return make([]int32, n)
}

// Copy makes a new independent copy of slice
func (slice SliceInt32) Copy() SliceInt32 {
	newSlice := NewInt32(len(slice))
	copy(newSlice, slice)
	return newSlice
}

// Set sets all element to c
func (slice SliceInt32) Set(c int32) {
	for i := 0; i < len(slice); i++ {
		slice[i] = c
	}
}

// SortAsc sort ascending
func (slice SliceInt32) SortAsc() {
	sort.Sort(slice)
}

// SortDesc sort descending
func (slice SliceInt32) SortDesc() {
	sort.Sort(sort.Reverse(slice))
}

func (slice SliceInt32) Len() int {
	return len(slice)
}

func (slice SliceInt32) Less(i, j int) bool {
	return slice[i] < slice[j]
}

func (slice SliceInt32) Swap(i, j int) {
	slice[i], slice[j] = slice[j], slice[i]
}

// Append c to slice
func (slice *SliceInt32) Append(c int32) {
	*slice = append(*slice, c)
}

func (slice SliceInt32) String() string {
	output := ""
	for _, c := range slice {
		if output != "" {
			output += " "
		}
		output += fmt.Sprintf("%v", c)
	}
	return output
}

// SliceInt64 type
type SliceInt64 []int64

// NewInt64 creates slice length n
func NewInt64(n int) SliceInt64 {
	return make([]int64, n)
}

// Copy makes a new independent copy of slice
func (slice SliceInt64) Copy() SliceInt64 {
	newSlice := NewInt64(len(slice))
	copy(newSlice, slice)
	return newSlice
}

// Set sets all element to c
func (slice SliceInt64) Set(c int64) {
	for i := 0; i < len(slice); i++ {
		slice[i] = c
	}
}

// SortAsc sort ascending
func (slice SliceInt64) SortAsc() {
	sort.Sort(slice)
}

// SortDesc sort descending
func (slice SliceInt64) SortDesc() {
	sort.Sort(sort.Reverse(slice))
}

func (slice SliceInt64) Len() int {
	return len(slice)
}

func (slice SliceInt64) Less(i, j int) bool {
	return slice[i] < slice[j]
}

func (slice SliceInt64) Swap(i, j int) {
	slice[i], slice[j] = slice[j], slice[i]
}

// Append c to slice
func (slice *SliceInt64) Append(c int64) {
	*slice = append(*slice, c)
}

func (slice SliceInt64) String() string {
	output := ""
	for _, c := range slice {
		if output != "" {
			output += " "
		}
		output += fmt.Sprintf("%v", c)
	}
	return output
}

// SliceUint8 type
type SliceUint8 []uint8

// NewUint8 creates slice length n
func NewUint8(n int) SliceUint8 {
	return make([]uint8, n)
}

// Copy makes a new independent copy of slice
func (slice SliceUint8) Copy() SliceUint8 {
	newSlice := NewUint8(len(slice))
	copy(newSlice, slice)
	return newSlice
}

// Set sets all element to c
func (slice SliceUint8) Set(c uint8) {
	for i := 0; i < len(slice); i++ {
		slice[i] = c
	}
}

// SortAsc sort ascending
func (slice SliceUint8) SortAsc() {
	sort.Sort(slice)
}

// SortDesc sort descending
func (slice SliceUint8) SortDesc() {
	sort.Sort(sort.Reverse(slice))
}

func (slice SliceUint8) Len() int {
	return len(slice)
}

func (slice SliceUint8) Less(i, j int) bool {
	return slice[i] < slice[j]
}

func (slice SliceUint8) Swap(i, j int) {
	slice[i], slice[j] = slice[j], slice[i]
}

// Append c to slice
func (slice *SliceUint8) Append(c uint8) {
	*slice = append(*slice, c)
}

func (slice SliceUint8) String() string {
	output := ""
	for _, c := range slice {
		if output != "" {
			output += " "
		}
		output += fmt.Sprintf("%v", c)
	}
	return output
}

// SliceUint16 type
type SliceUint16 []uint16

// NewUint16 creates slice length n
func NewUint16(n int) SliceUint16 {
	return make([]uint16, n)
}

// Copy makes a new independent copy of slice
func (slice SliceUint16) Copy() SliceUint16 {
	newSlice := NewUint16(len(slice))
	copy(newSlice, slice)
	return newSlice
}

// Set sets all element to c
func (slice SliceUint16) Set(c uint16) {
	for i := 0; i < len(slice); i++ {
		slice[i] = c
	}
}

// SortAsc sort ascending
func (slice SliceUint16) SortAsc() {
	sort.Sort(slice)
}

// SortDesc sort descending
func (slice SliceUint16) SortDesc() {
	sort.Sort(sort.Reverse(slice))
}

func (slice SliceUint16) Len() int {
	return len(slice)
}

func (slice SliceUint16) Less(i, j int) bool {
	return slice[i] < slice[j]
}

func (slice SliceUint16) Swap(i, j int) {
	slice[i], slice[j] = slice[j], slice[i]
}

// Append c to slice
func (slice *SliceUint16) Append(c uint16) {
	*slice = append(*slice, c)
}

func (slice SliceUint16) String() string {
	output := ""
	for _, c := range slice {
		if output != "" {
			output += " "
		}
		output += fmt.Sprintf("%v", c)
	}
	return output
}

// SliceUint32 type
type SliceUint32 []uint32

// NewUint32 creates slice length n
func NewUint32(n int) SliceUint32 {
	return make([]uint32, n)
}

// Copy makes a new independent copy of slice
func (slice SliceUint32) Copy() SliceUint32 {
	newSlice := NewUint32(len(slice))
	copy(newSlice, slice)
	return newSlice
}

// Set sets all element to c
func (slice SliceUint32) Set(c uint32) {
	for i := 0; i < len(slice); i++ {
		slice[i] = c
	}
}

// SortAsc sort ascending
func (slice SliceUint32) SortAsc() {
	sort.Sort(slice)
}

// SortDesc sort descending
func (slice SliceUint32) SortDesc() {
	sort.Sort(sort.Reverse(slice))
}

func (slice SliceUint32) Len() int {
	return len(slice)
}

func (slice SliceUint32) Less(i, j int) bool {
	return slice[i] < slice[j]
}

func (slice SliceUint32) Swap(i, j int) {
	slice[i], slice[j] = slice[j], slice[i]
}

// Append c to slice
func (slice *SliceUint32) Append(c uint32) {
	*slice = append(*slice, c)
}

func (slice SliceUint32) String() string {
	output := ""
	for _, c := range slice {
		if output != "" {
			output += " "
		}
		output += fmt.Sprintf("%v", c)
	}
	return output
}

// SliceUint64 type
type SliceUint64 []uint64

// NewUint64 creates slice length n
func NewUint64(n int) SliceUint64 {
	return make([]uint64, n)
}

// Copy makes a new independent copy of slice
func (slice SliceUint64) Copy() SliceUint64 {
	newSlice := NewUint64(len(slice))
	copy(newSlice, slice)
	return newSlice
}

// Set sets all element to c
func (slice SliceUint64) Set(c uint64) {
	for i := 0; i < len(slice); i++ {
		slice[i] = c
	}
}

// SortAsc sort ascending
func (slice SliceUint64) SortAsc() {
	sort.Sort(slice)
}

// SortDesc sort descending
func (slice SliceUint64) SortDesc() {
	sort.Sort(sort.Reverse(slice))
}

func (slice SliceUint64) Len() int {
	return len(slice)
}

func (slice SliceUint64) Less(i, j int) bool {
	return slice[i] < slice[j]
}

func (slice SliceUint64) Swap(i, j int) {
	slice[i], slice[j] = slice[j], slice[i]
}

// Append c to slice
func (slice *SliceUint64) Append(c uint64) {
	*slice = append(*slice, c)
}

func (slice SliceUint64) String() string {
	output := ""
	for _, c := range slice {
		if output != "" {
			output += " "
		}
		output += fmt.Sprintf("%v", c)
	}
	return output
}

// SliceUint type
type SliceUint []uint

// NewUint creates slice length n
func NewUint(n int) SliceUint {
	return make([]uint, n)
}

// Copy makes a new independent copy of slice
func (slice SliceUint) Copy() SliceUint {
	newSlice := NewUint(len(slice))
	copy(newSlice, slice)
	return newSlice
}

// Set sets all element to c
func (slice SliceUint) Set(c uint) {
	for i := 0; i < len(slice); i++ {
		slice[i] = c
	}
}

// SortAsc sort ascending
func (slice SliceUint) SortAsc() {
	sort.Sort(slice)
}

// SortDesc sort descending
func (slice SliceUint) SortDesc() {
	sort.Sort(sort.Reverse(slice))
}

func (slice SliceUint) Len() int {
	return len(slice)
}

func (slice SliceUint) Less(i, j int) bool {
	return slice[i] < slice[j]
}

func (slice SliceUint) Swap(i, j int) {
	slice[i], slice[j] = slice[j], slice[i]
}

// Append c to slice
func (slice *SliceUint) Append(c uint) {
	*slice = append(*slice, c)
}

func (slice SliceUint) String() string {
	output := ""
	for _, c := range slice {
		if output != "" {
			output += " "
		}
		output += fmt.Sprintf("%v", c)
	}
	return output
}

// SliceInt type
type SliceInt []int

// NewInt creates slice length n
func NewInt(n int) SliceInt {
	return make([]int, n)
}

// Copy makes a new independent copy of slice
func (slice SliceInt) Copy() SliceInt {
	newSlice := NewInt(len(slice))
	copy(newSlice, slice)
	return newSlice
}

// Set sets all element to c
func (slice SliceInt) Set(c int) {
	for i := 0; i < len(slice); i++ {
		slice[i] = c
	}
}

// SortAsc sort ascending
func (slice SliceInt) SortAsc() {
	sort.Sort(slice)
}

// SortDesc sort descending
func (slice SliceInt) SortDesc() {
	sort.Sort(sort.Reverse(slice))
}

func (slice SliceInt) Len() int {
	return len(slice)
}

func (slice SliceInt) Less(i, j int) bool {
	return slice[i] < slice[j]
}

func (slice SliceInt) Swap(i, j int) {
	slice[i], slice[j] = slice[j], slice[i]
}

// Append c to slice
func (slice *SliceInt) Append(c int) {
	*slice = append(*slice, c)
}

func (slice SliceInt) String() string {
	output := ""
	for _, c := range slice {
		if output != "" {
			output += " "
		}
		output += fmt.Sprintf("%v", c)
	}
	return output
}

// SliceFloat64 type
type SliceFloat64 []float64

// NewFloat64 creates slice length n
func NewFloat64(n int) SliceFloat64 {
	return make([]float64, n)
}

// Copy makes a new independent copy of slice
func (slice SliceFloat64) Copy() SliceFloat64 {
	newSlice := NewFloat64(len(slice))
	copy(newSlice, slice)
	return newSlice
}

// Set sets all element to c
func (slice SliceFloat64) Set(c float64) {
	for i := 0; i < len(slice); i++ {
		slice[i] = c
	}
}

// SortAsc sort ascending
func (slice SliceFloat64) SortAsc() {
	sort.Sort(slice)
}

// SortDesc sort descending
func (slice SliceFloat64) SortDesc() {
	sort.Sort(sort.Reverse(slice))
}

func (slice SliceFloat64) Len() int {
	return len(slice)
}

func (slice SliceFloat64) Less(i, j int) bool {
	return slice[i] < slice[j]
}

func (slice SliceFloat64) Swap(i, j int) {
	slice[i], slice[j] = slice[j], slice[i]
}

// Append c to slice
func (slice *SliceFloat64) Append(c float64) {
	*slice = append(*slice, c)
}

func (slice SliceFloat64) String() string {
	output := ""
	for _, c := range slice {
		if output != "" {
			output += " "
		}
		output += fmt.Sprintf("%v", c)
	}
	return output
}
