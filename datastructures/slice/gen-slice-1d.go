// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package slice

// NewSliceInt creates slice length n
func NewSliceInt(n int) SliceInt {
	return make([]int, n)
}

// Copy makes a new independent copy of slice
func (slice SliceInt) Copy() SliceInt {
	newSlice := NewSliceInt(len(slice))
	copy(newSlice, slice)
	return newSlice
}

// String is for print
func (slice SliceInt) String() string {
	return slice.Print(" ")
}

// NewSliceFloat64 creates slice length n
func NewSliceFloat64(n int) SliceFloat64 {
	return make([]float64, n)
}

// Copy makes a new independent copy of slice
func (slice SliceFloat64) Copy() SliceFloat64 {
	newSlice := NewSliceFloat64(len(slice))
	copy(newSlice, slice)
	return newSlice
}

// String is for print
func (slice SliceFloat64) String() string {
	return slice.Print(" ")
}

// NewSliceString creates slice length n
func NewSliceString(n int) SliceString {
	return make([]string, n)
}

// Copy makes a new independent copy of slice
func (slice SliceString) Copy() SliceString {
	newSlice := NewSliceString(len(slice))
	copy(newSlice, slice)
	return newSlice
}

// String is for print
func (slice SliceString) String() string {
	return slice.Print(" ")
}

// NewSliceByte creates slice length n
func NewSliceByte(n int) SliceByte {
	return make([]byte, n)
}

// Copy makes a new independent copy of slice
func (slice SliceByte) Copy() SliceByte {
	newSlice := NewSliceByte(len(slice))
	copy(newSlice, slice)
	return newSlice
}

// String is for print
func (slice SliceByte) String() string {
	return slice.Print(" ")
}

// NewSliceBool creates slice length n
func NewSliceBool(n int) SliceBool {
	return make([]bool, n)
}

// Copy makes a new independent copy of slice
func (slice SliceBool) Copy() SliceBool {
	newSlice := NewSliceBool(len(slice))
	copy(newSlice, slice)
	return newSlice
}

// String is for print
func (slice SliceBool) String() string {
	return slice.Print(" ")
}
